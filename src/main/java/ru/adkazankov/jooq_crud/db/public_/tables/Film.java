/*
 * This file is generated by jOOQ.
*/
package ru.adkazankov.jooq_crud.db.public_.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.adkazankov.jooq_crud.db.public_.Indexes;
import ru.adkazankov.jooq_crud.db.public_.Keys;
import ru.adkazankov.jooq_crud.db.public_.Public;
import ru.adkazankov.jooq_crud.db.public_.tables.records.FilmRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Film extends TableImpl<FilmRecord> {

    private static final long serialVersionUID = 1591520860;

    /**
     * The reference instance of <code>public.film</code>
     */
    public static final Film FILM = new Film();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmRecord> getRecordType() {
        return FilmRecord.class;
    }

    /**
     * The column <code>public.film.id</code>.
     */
    public final TableField<FilmRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('film_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.film.name</code>.
     */
    public final TableField<FilmRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(254), this, "");

    /**
     * The column <code>public.film.release_date</code>.
     */
    public final TableField<FilmRecord, Date> RELEASE_DATE = createField("release_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>public.film.author_id</code>.
     */
    public final TableField<FilmRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.film</code> table reference
     */
    public Film() {
        this(DSL.name("film"), null);
    }

    /**
     * Create an aliased <code>public.film</code> table reference
     */
    public Film(String alias) {
        this(DSL.name(alias), FILM);
    }

    /**
     * Create an aliased <code>public.film</code> table reference
     */
    public Film(Name alias) {
        this(alias, FILM);
    }

    private Film(Name alias, Table<FilmRecord> aliased) {
        this(alias, aliased, null);
    }

    private Film(Name alias, Table<FilmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FILM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FilmRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FILM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FilmRecord> getPrimaryKey() {
        return Keys.FILM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FilmRecord>> getKeys() {
        return Arrays.<UniqueKey<FilmRecord>>asList(Keys.FILM_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<FilmRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FilmRecord, ?>>asList(Keys.FILM__FILM_AUTHOR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Film as(String alias) {
        return new Film(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Film as(Name alias) {
        return new Film(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Film rename(String name) {
        return new Film(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Film rename(Name name) {
        return new Film(name, null);
    }
}
